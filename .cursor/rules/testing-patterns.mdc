---
description: Testing patterns for healthcare systems
globs: ["**/test/**", "**/*Test.java", "**/*Test.cs", "**/*.test.ts", "**/*.spec.ts", "**/tests/**"]
---
# Healthcare Testing Patterns

## TEST DATA RULES

### Synthetic Data (Required)
```java
// ✅ CORRECT - Synthetic, obviously fake data
private static final String TEST_PATIENT_NAME = "TEST_PATIENT_001";
private static final String TEST_DOB = "1900-01-01";
private static final String TEST_ADDRESS = "123 Test Street, Test City, TS1 1ST";
private static final String TEST_MRN = "TEST_MRN_001";
private static final String TEST_EMAIL = "test.patient.001@example.test";

// ❌ WRONG - Realistic data that could be mistaken for PHI
private static final String TEST_PATIENT_NAME = "John Smith";
private static final String TEST_DOB = "1985-06-15";
private static final String TEST_EMAIL = "john.smith@gmail.com";
```

### Test Data Builders
```csharp
public class PatientTestBuilder
{
    private string _referenceId = "TEST_PAT_001";
    private string _name = "TEST_PATIENT_001";
    private DateTime _dob = new DateTime(1900, 1, 1);
    
    public PatientTestBuilder WithReferenceId(string refId)
    {
        _referenceId = refId;
        return this;
    }
    
    public PatientTestBuilder WithName(string name)
    {
        // Ensure test prefix
        _name = name.StartsWith("TEST_") ? name : $"TEST_{name}";
        return this;
    }
    
    public Patient Build()
    {
        return new Patient {
            ReferenceId = _referenceId,
            Name = _name,
            DateOfBirth = _dob,
            Address = "123 Test Street, Test City, TS1 1ST"
        };
    }
}

// Usage
var patient = new PatientTestBuilder()
    .WithReferenceId("TEST_PAT_002")
    .WithName("TEST_PATIENT_002")
    .Build();
```

## CONSENT TESTING

Every test accessing clinical data must setup consent:

### C#/NUnit
```csharp
[Test]
public async Task GetPatientData_WithValidConsent_ReturnsData()
{
    // Arrange
    var consent = new ConsentBuilder()
        .WithScope("EHR_VIEW")
        .WithExpiry(DateTime.UtcNow.AddHours(1))
        .WithPatientRef("TEST_PAT_001")
        .WithUserId("TEST_USER_001")
        .Build();
    
    var patient = new PatientTestBuilder()
        .WithReferenceId("TEST_PAT_001")
        .Build();
    
    _mockRepository.Setup(r => r.GetByRefAsync("TEST_PAT_001"))
        .ReturnsAsync(patient);
    
    // Act
    var result = await _service.GetPatientData("TEST_PAT_001", consent);
    
    // Assert
    Assert.NotNull(result);
    Assert.AreEqual("TEST_PAT_001", result.ReferenceId);
}

[Test]
public async Task GetPatientData_WithExpiredConsent_ThrowsException()
{
    // REQUIRED: Test consent expiry handling
    var expiredConsent = new ConsentBuilder()
        .WithScope("EHR_VIEW")
        .WithExpiry(DateTime.UtcNow.AddHours(-1)) // Expired
        .Build();
    
    // Act & Assert
    Assert.ThrowsAsync<ConsentExpiredException>(
        () => _service.GetPatientData("TEST_PAT_001", expiredConsent)
    );
}

[Test]
public async Task GetPatientData_WithInsufficientScope_ThrowsException()
{
    // REQUIRED: Test insufficient scope
    var consent = new ConsentBuilder()
        .WithScope("APPOINTMENTS") // Wrong scope
        .WithExpiry(DateTime.UtcNow.AddHours(1))
        .Build();
    
    Assert.ThrowsAsync<InsufficientConsentException>(
        () => _service.GetPatientData("TEST_PAT_001", consent)
    );
}

[Test]
public async Task GetPatientData_WithRevokedConsent_ThrowsException()
{
    // REQUIRED: Test revoked consent
    var revokedConsent = new ConsentBuilder()
        .WithScope("EHR_VIEW")
        .WithExpiry(DateTime.UtcNow.AddHours(1))
        .WithRevoked(true)
        .Build();
    
    Assert.ThrowsAsync<ConsentRevokedException>(
        () => _service.GetPatientData("TEST_PAT_001", revokedConsent)
    );
}
```

### Java/JUnit
```java
@Test
void getPatientData_withValidConsent_returnsData() {
    // Arrange
    ConsentContext consent = ConsentContext.builder()
        .scope("EHR_VIEW")
        .expiry(Instant.now().plus(1, ChronoUnit.HOURS))
        .patientRef("TEST_PAT_001")
        .userId("TEST_USER_001")
        .build();
    
    Patient patient = Patient.builder()
        .referenceId("TEST_PAT_001")
        .name("TEST_PATIENT_001")
        .dateOfBirth(LocalDate.of(1900, 1, 1))
        .build();
    
    when(repository.findByRef("TEST_PAT_001")).thenReturn(Optional.of(patient));
    
    // Act
    PatientData result = service.getPatientData("TEST_PAT_001", consent);
    
    // Assert
    assertNotNull(result);
    assertEquals("TEST_PAT_001", result.getReferenceId());
}

@Test
void getPatientData_withExpiredConsent_throwsException() {
    // Arrange
    ConsentContext expiredConsent = ConsentContext.builder()
        .scope("EHR_VIEW")
        .expiry(Instant.now().minus(1, ChronoUnit.HOURS)) // Expired
        .build();
    
    // Act & Assert
    assertThrows(ConsentExpiredException.class, 
        () -> service.getPatientData("TEST_PAT_001", expiredConsent));
}
```

## INTEGRATION TESTING

### Database Tests
```csharp
[TestFixture]
public class PatientRepositoryTests
{
    private DbContext _context;
    private PatientRepository _repository;
    
    [SetUp]
    public void Setup()
    {
        // Use in-memory database for tests
        var options = new DbContextOptionsBuilder<AppDbContext>()
            .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
            .Options;
        
        _context = new AppDbContext(options);
        _repository = new PatientRepository(_context);
    }
    
    [TearDown]
    public void TearDown()
    {
        _context.Database.EnsureDeleted();
        _context.Dispose();
    }
    
    [Test]
    public async Task SavePatient_WithValidData_SavesSuccessfully()
    {
        // Arrange
        var patient = new PatientTestBuilder()
            .WithReferenceId("TEST_PAT_001")
            .Build();
        
        // Act
        await _repository.SaveAsync(patient);
        var saved = await _repository.GetByRefAsync("TEST_PAT_001");
        
        // Assert
        Assert.NotNull(saved);
        Assert.AreEqual("TEST_PAT_001", saved.ReferenceId);
    }
}
```

### API Integration Tests
```java
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
@AutoConfigureMockMvc
class PatientControllerIntegrationTest {
    
    @Autowired
    private MockMvc mockMvc;
    
    @Test
    void createPatient_withValidConsent_returns201() throws Exception {
        String requestBody = """
            {
                "name": "TEST_PATIENT_001",
                "dateOfBirth": "1900-01-01",
                "address": "123 Test Street"
            }
            """;
        
        mockMvc.perform(post("/api/patients")
                .contentType(MediaType.APPLICATION_JSON)
                .header("X-Consent-Scope", "EHR_WRITE")
                .header("X-Correlation-Id", "TEST_CORR_001")
                .content(requestBody))
            .andExpect(status().isCreated())
            .andExpect(jsonPath("$.referenceId").exists())
            .andExpect(header().exists("X-Correlation-Id"));
    }
    
    @Test
    void createPatient_withoutConsent_returns403() throws Exception {
        String requestBody = """
            {
                "name": "TEST_PATIENT_001",
                "dateOfBirth": "1900-01-01"
            }
            """;
        
        mockMvc.perform(post("/api/patients")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
            .andExpect(status().isForbidden());
    }
}
```

## MOCKING PATTERNS

### Service Mocking
```csharp
[Test]
public async Task CreatePatient_CallsRepositoryOnce()
{
    // Arrange
    var mockRepo = new Mock<IPatientRepository>();
    var service = new PatientService(mockRepo.Object);
    
    var dto = new PatientDto {
        Name = "TEST_PATIENT_001",
        DateOfBirth = new DateTime(1900, 1, 1)
    };
    
    mockRepo.Setup(r => r.SaveAsync(It.IsAny<Patient>()))
        .ReturnsAsync(new Patient { Id = 1, ReferenceId = "TEST_PAT_001" });
    
    // Act
    var result = await service.CreateAsync(dto);
    
    // Assert
    mockRepo.Verify(r => r.SaveAsync(It.IsAny<Patient>()), Times.Once);
    Assert.AreEqual("TEST_PAT_001", result.ReferenceId);
}
```

### External Service Mocking
```typescript
describe('PatientService', () => {
    let service: PatientService;
    let mockHttpClient: jest.Mocked<HttpClient>;
    
    beforeEach(() => {
        mockHttpClient = {
            get: jest.fn(),
            post: jest.fn()
        } as any;
        
        service = new PatientService(mockHttpClient);
    });
    
    it('should fetch patient data with consent', async () => {
        // Arrange
        const mockResponse = {
            referenceId: 'TEST_PAT_001',
            name: 'TEST_PATIENT_001'
        };
        
        mockHttpClient.get.mockResolvedValue(mockResponse);
        
        // Act
        const result = await service.getPatient('TEST_PAT_001', 'EHR_VIEW');
        
        // Assert
        expect(mockHttpClient.get).toHaveBeenCalledWith(
            '/api/patients/TEST_PAT_001',
            expect.objectContaining({
                headers: expect.objectContaining({
                    'X-Consent-Scope': 'EHR_VIEW'
                })
            })
        );
        expect(result.referenceId).toBe('TEST_PAT_001');
    });
});
```

## PERFORMANCE TESTING

### Load Testing Pattern
```csharp
[Test]
[Category("Performance")]
public async Task GetPatients_Under100ms_For100Records()
{
    // Arrange
    var patients = Enumerable.Range(1, 100)
        .Select(i => new PatientTestBuilder()
            .WithReferenceId($"TEST_PAT_{i:000}")
            .Build())
        .ToList();
    
    await _repository.SaveRangeAsync(patients);
    
    // Act
    var stopwatch = Stopwatch.StartNew();
    var result = await _repository.GetAllAsync(0, 100);
    stopwatch.Stop();
    
    // Assert
    Assert.LessOrEqual(stopwatch.ElapsedMilliseconds, 100);
    Assert.AreEqual(100, result.Count);
}
```

## TEST ORGANIZATION

### Arrange-Act-Assert Pattern
```java
@Test
void testMethod_condition_expectedBehavior() {
    // Arrange - Setup test data and dependencies
    Patient patient = createTestPatient();
    ConsentContext consent = createValidConsent();
    
    // Act - Execute the method under test
    PatientData result = service.getPatientData(patient.getReferenceId(), consent);
    
    // Assert - Verify the outcome
    assertNotNull(result);
    assertEquals(patient.getReferenceId(), result.getReferenceId());
}
```

## COMPLIANCE TESTING

### PHI Protection Tests
```csharp
[Test]
public void LogPatientAccess_DoesNotLogPHI()
{
    // Arrange
    var mockLogger = new Mock<ILogger<PatientService>>();
    var service = new PatientService(mockLogger.Object);
    
    var patient = new PatientTestBuilder()
        .WithName("TEST_PATIENT_001")
        .Build();
    
    // Act
    service.LogAccess(patient);
    
    // Assert - Verify PHI not logged
    mockLogger.Verify(
        l => l.Log(
            It.IsAny<LogLevel>(),
            It.IsAny<EventId>(),
            It.Is<It.IsAnyType>((v, t) => !v.ToString().Contains("TEST_PATIENT_001")),
            It.IsAny<Exception>(),
            It.IsAny<Func<It.IsAnyType, Exception, string>>()),
        Times.Once);
}
```

## COMPLIANCE NOTES
- Always use synthetic test data with TEST_ prefix
- Test all consent scenarios (valid, expired, revoked, insufficient)
- Mock external services to avoid real PHI
- Use in-memory databases for integration tests
- Clean up test data after each test
- Test PHI protection in logging

